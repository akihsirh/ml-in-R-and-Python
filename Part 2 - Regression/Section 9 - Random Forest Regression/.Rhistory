for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 10000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
expected_value
sample_size <- 100000
for(loop in 1:5){
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
print
sample_size <- 100000
for(loop in 1:5){
counter <- 0
for(i in rnorm(sample_size)){
if(i <= 1 & i >= -1 ){
counter <- counter+1
}
}
expected_value <- counter/sample_size
print(expected_value)
}
MyFirstVector <- c(3,45,56,732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
MyFirstVector <- c(3l,45l,732l)
MyFirstVector <- c(3L,45L,732L)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
CVec <- c("A","b","123")
CVec
is.numeric(CVec)
is.character(CVec)
S1Vec <- c("a","g",7)
S1Vec
is.numeric(S1Vec)
is.character(S1Vec)
seq(1,15)
1:15
z<- seq(1,15,4)
z
rep1 <- rep(6,21)
rep1
repc <- rep("A",35)
repc
repv <- rep(c(3,4),10)
rep1 <- rep(6,21)repv
repv
z1 <- seq(20,35,6)
z1
z2 <- seq(20:35,40)
z2 <- seq(20:21)
z2
z2
z2 <- seq(20:21)
z2
z2 <- seq(20:22)
z2
z2 <- seq(20:23)
z2
z2 <- seq(20:30)
z2
MyFirstVector[1]
MyFirstVector[3]
z[-9]
z<- seq(1,15,4)
z
z<- seq(1,15)
z
z[-9]
z[-20]
z[20]
MyFirstVector[-1:-3]
MyFirstVector[1:3]
z[4:7]
z[c(8,11,12)]
z[c(-2,-5)]
z[-3:-6]
z[-1:1]
z[seq(2:5)]
z[seq(2,5)]
z[rep(3,5)]
z[0]
z[102]
z[-102]
zero <- z[0]
zero
sv1 <- seq(1:15)
sv2 <- seq(16:20)
svadd <- sv1 + sv2
svadd
svsub <- sv2 - sv1
svsub
#Vector Arithmatics
sv1 <- seq(1,15)
sv2 <- seq(16,20)
#Vector Addition
svadd <- sv1 + sv2
svadd
svsub <- sv2 - sv1
svsub
svsub1 <- sv1 - sv2
svsub1
svmul <- sv1 * sv2
svmul
svdiv <- sv1 /sv2
svdiv
svmod <- sv2 % sv1
svmod
sv3 <- seq(1,30)
sv4 <- sv2 + sv3
sv4
sv5 <- seq(1,19)
sv6 <- sv5 + sv3
sv5 <- seq(1,19)
sv6 <- sv5 + sv3
sv6
x <- rnorm(5)
x
x <- rnorm(5)
x
for(i in x){
print(i)
}
# programming generic loop
for(j in 1:5){
print(j)
}
# R specific programming loop
for(i in x){
print(i)
}
# programming generic loop
for(j in 1:5){
print(x[j])
}
N <- 100
r <- rnorm(N)
s <- rnorm(N)
# ------------------------------- vectorized ways -----------------
N <- 100
r <- rnorm(N)
s <- rnorm(N)
#devectorized multiplication
t <- rep(NA,N)
for(i in 1:N){
t[i] <- r[i] * s[i]
}
#vectorized multiplication
u <- r * s
?seq
z<- seq(1,15,4)
z
z1 <- seq(20,35,6)
z1
z2 <- seq(20:30)
z2
z3 <- seq(from=35, to = 55, length.out = 15)
z3
seqlen <- c("q", "w","e","r","t","y")
z4 <- seq(from=35, to = 55, along.with = seqlen)
z4
repseq1 <- rep(5:6,10)
repseq1
repseq1 <- rep(5:6,times = 10)
repseq1
repseq2 <- rep(5:6,each = 10)
repseq2
b <- sqrt(repseq1)
b
setwd("C:/Git/ML-R-and-Python/Part 2 - Regression/Section 8 - Decision Tree Regression")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset_model <- dataset[2:3]
#Build the decision tree regressor
install.packages('rpart')
library(rpart)
?rpart
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset_model <- dataset[2:3]
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset_model)
summary(regressor)
#Find the salary for a custom position level
predict(regressor, data.frame(Level = 6.5))
View(dataset_model)
View(dataset_model)
library(ggplot2)
p <- ggplot()
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=dataset_model$Level, y=predict(regressor, newdata = dataset_model)),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
?rpart
regressor = rpart(formula = Salary ~ .,
data = dataset_model ,
control = rpart.control(minsplit = 1))
#Find the salary for a custom position level
predict(regressor, data.frame(Level = 6.5))
View(dataset_model)
regressor = rpart(formula = Salary ~ .,
data = dataset_model ,
control = rpart.control(minsplit = 10))
#Find the salary for a custom position level
predict(regressor, data.frame(Level = 6.5))
regressor = rpart(formula = Salary ~ .,
data = dataset_model ,
control = rpart.control(minsplit = 1))
#Plot the results of decision tree regression
library(ggplot2)
p <- ggplot()
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=dataset_model$Level, y=predict(regressor, newdata = dataset_model)),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
#Plot the results of decision tree regression in higher resolution
x_plot <- seq(min(dataset_model$Level), max(dataset_model$Level), 0.01)
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=x_plot$Level, y=predict(regressor, newdata = x_plot)),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=x_plot$Level, y=predict(regressor, newdata = data.frame(Level= x_plot))),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=dataset_modelLevel, y=predict(regressor, newdata = data.frame(Level= x_plot))),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=dataset_model$Level, y=predict(regressor, newdata = data.frame(Level= x_plot))),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(data = dataset_model,
aes(x=x_plot, y=predict(regressor, newdata = data.frame(Level= x_plot))),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
p + geom_point(data = dataset_model,
aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red'))
p + geom_point(aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(aes(x=x_plot, y=predict(regressor, newdata = data.frame(Level= x_plot))),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
regressor = rpart(formula = Salary ~ .,
data = dataset_model ,
control = rpart.control(minsplit = 6))
#Find the salary for a custom position level
predict(regressor, data.frame(Level = 6.5))
regressor = rpart(formula = Salary ~ .,
data = dataset_model ,
control = rpart.control(minsplit = 7))
#Find the salary for a custom position level
predict(regressor, data.frame(Level = 6.5))
summary(regressor)
regressor = rpart(formula = Salary ~ .,
data = dataset_model ,
control = rpart.control(minsplit = 1))
p + geom_point(aes(x=dataset_model$Level,
y=dataset_model$Salary,
color= 'Red')) +
geom_line(aes(x=x_plot, y=predict(regressor, newdata = data.frame(Level= x_plot))),
color = 'Blue',
size = 0.9) +
xlab("Position Level") +
ylab("Salary") +
ggtitle("Salary based on position")
setwd("C:/Git/ML-R-and-Python/Part 2 - Regression/Section 9 - Random Forest Regression")
# Fitting Random Forest Regression to the dataset
install.packages('randomForest')
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
set.seed(1234)
# Random Forest Regression
# Importing the dataset
dataset <-  read.csv('Position_Salaries.csv')
dataset <- dataset[2:3]
#Dont need to split into training and test set since the dataset is small
#Dont need feature scaling since the decision trees dont depend on Euclidean distances of the
#data points
# Fitting Random Forest Regression to the dataset
#install.packages('randomForest')
library(randomForest)
set.seed(1234)
?randomForest
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 300)
summary(regressor)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 400)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 450)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 400)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 400)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
regressor <- randomForest(x = dataset_model[1], #we need a dataframe hence brackets
y = dataset_model$Salary, # dollar sign because this needs vector
ntree = 450)
# Predicting a new result with Random Forest Regression
y_pred <- predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
